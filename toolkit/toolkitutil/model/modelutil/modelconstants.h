#pragma once
//------------------------------------------------------------------------------
/**
    @class ToolkitUtil::ModelConstants
    
    Contains constants for a model which is generated by the graphics pipeline.
    
    (C) 2012 Gustav Sterbrant
*/
//------------------------------------------------------------------------------
#include "core/refcounted.h"
#include "model/n3util/n3modeldata.h"
#include "math/bbox.h"
#include "io/stream.h"
#include "particles/emitterattrs.h"
namespace ToolkitUtil
{
class ModelConstants : public Core::RefCounted
{
    __DeclareClass(ModelConstants);
public:

    struct TransformNode
    {
        Util::String name;
        Util::String path;
        float LODMax;
        float LODMin;
        bool useLOD = false;
        ToolkitUtil::Transform transform;
        Math::bbox boundingBox;
    };

    struct ShapeNode : public TransformNode
    {
        Util::String meshResource;
        IndexT meshIndex;
        IndexT primitiveGroupIndex;
    };
    
    struct SkinNode : public ShapeNode
    {
        Util::Array<IndexT> fragmentJoints;
    };

    struct SkinSetNode : TransformNode
    {
        Util::Array<SkinNode> skinFragments;
    };

    struct CharacterNode
    {
        Util::String skeletonResource;
        IndexT skeletonIndex;
        Util::String animationResource;
        IndexT animationIndex;
        Util::String name;
    };

    struct PhysicsNode : public TransformNode
    {
        Util::String mesh;
        Util::String material;
        IndexT primitiveGroupIndex;
    };

    // not a bug!
    struct ParticleNode : public ShapeNode
    {
    };


    /// constructor
    ModelConstants();
    /// destructor
    virtual ~ModelConstants();

    /// adds character node
    void AddCharacterNode(const Util::String& name, const ModelConstants::CharacterNode& node);
    /// returns character node by name
    const ModelConstants::CharacterNode& GetCharacterNode(const Util::String& name) const;
    /// returns dictionary with all character nodes
    const Util::Array<ModelConstants::CharacterNode> GetCharacterNodes() const;
    /// returns if node with name exists
    bool HasCharacterNode(const Util::String& name);
    /// delete character node
    void DeleteCharacterNode(const Util::String& name);

    /// adds shape node
    void AddShapeNode(const ModelConstants::ShapeNode& node);
    /// returns dictionary with all shape nodes
    const Util::Array<ModelConstants::ShapeNode>& GetShapeNodes() const;

    /// Add a skin set
    void AddSkinSetNode(const ModelConstants::SkinSetNode& skinSet);
    /// Get skinsets
    const Util::Array<ModelConstants::SkinSetNode>& GetSkinSetNodes() const;

    /// adds a particle
    void AddParticleNode(const Util::String& name, const ModelConstants::ParticleNode& node);
    /// get particle node by name
    const ModelConstants::ParticleNode& GetParticleNode(const Util::String& name);
    /// returns dictionary with all particle nodes
    const Util::Array<ModelConstants::ParticleNode> GetParticleNodes() const;
    /// replaces particle node
    void ReplaceParticleNode(const Util::String& name, const ModelConstants::ParticleNode& node);
    /// returns if node with name exists
    bool HasParticleNode(const Util::String& name);
    /// delete particle node
    void DeleteParticleNode(const Util::String& name);

    /// adds a physics node
    void AddPhysicsNode(const Util::String& name, const ModelConstants::PhysicsNode& node);
    /// get physics node by name
    const ModelConstants::PhysicsNode& GetPhysicsNode(const Util::String& name);
    /// returns dictionary with all physics nodes
    const Util::Array<ModelConstants::PhysicsNode> GetPhysicsNodes() const;
    /// returns if node with name exists
    bool HasPhysicsNode(const Util::String& name);
    /// delete physics node
    void DeletePhysicsNode(const Util::String& name);

    /// set global bounding box for root transform node
    void SetGlobalBoundingBox(const Math::bbox& bbox);
    /// gets the global bounding box for root transform node
    const Math::bbox& GetGlobalBoundingBox() const;
    /// sets the name of the model
    void SetName(const Util::String& name);
    /// gets name of the model
    const Util::String& GetName() const;

    /// clears constants
    void Clear();

    /// saves constants to file
    void Save(const Ptr<IO::Stream>& stream);
    /// loads constants from file
    void Load(const Ptr<IO::Stream>& stream);

private:
    Util::String name;
    Util::String checksum;
    Math::bbox globalBoundingBox;
    Util::Array<ModelConstants::ShapeNode> shapeNodes;
    Util::Dictionary<Util::String, ModelConstants::CharacterNode> characterNodes;
    Util::Dictionary<Util::String, ModelConstants::ParticleNode> particleNodes;
    Util::Dictionary<Util::String, ModelConstants::PhysicsNode> physicsNodes;
    Util::Array<SkinSetNode> skinSetNodes;

    static const short Version = 4;
}; 

//------------------------------------------------------------------------------
/**
*/
inline const Util::Array<ModelConstants::CharacterNode> 
ModelConstants::GetCharacterNodes() const
{
    return this->characterNodes.ValuesAsArray();
}

//------------------------------------------------------------------------------
/**
*/
inline const Util::Array<ModelConstants::ParticleNode> 
ModelConstants::GetParticleNodes() const
{
    return this->particleNodes.ValuesAsArray();
}

//------------------------------------------------------------------------------
/**
*/
inline const Util::Array<ModelConstants::PhysicsNode> 
ModelConstants::GetPhysicsNodes() const
{
    return this->physicsNodes.ValuesAsArray();
}

//------------------------------------------------------------------------------
/**
*/
inline void 
ModelConstants::SetGlobalBoundingBox( const Math::bbox& bbox )
{
    this->globalBoundingBox = bbox;
}

//------------------------------------------------------------------------------
/**
*/
inline const Math::bbox& 
ModelConstants::GetGlobalBoundingBox() const
{
    return this->globalBoundingBox;
}

//------------------------------------------------------------------------------
/**
*/
inline void 
ModelConstants::SetName( const Util::String& name )
{
    this->name = name;
}

//------------------------------------------------------------------------------
/**
*/
inline const Util::String& 
ModelConstants::GetName() const
{
    return this->name;
}
} // namespace ToolkitUtil
//------------------------------------------------------------------------------